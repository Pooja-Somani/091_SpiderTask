#include <cmath>
#include <cstdio>
#include <vector>
#include <iostream>
#include <algorithm>
#include <queue>
using namespace std;

struct Node {
    int data;
    Node* left;
    Node* right;
};

Node* createNode(int data)
{
    Node* n = new Node();
    if (!n) {
        cout << "Memory error\n";
        return NULL;
    }
    n->data = data;
    n->left = n->right = NULL;
    return n;
}

Node* insertnode(Node* root, int data)
{
    if (root == NULL) {
        root = createNode(data);
        return root;
    }
    queue<Node*> q;
    q.push(root);

    while (!q.empty()) 
    {
        Node* temp = q.front();
        q.pop();
        if (temp->left && temp->left->data!=-1)
            q.push(temp->left);
        else if (temp->left && temp->left->data==-1)
            ;
        else
        {
            temp->left = createNode(data);
            return root;
        }

        if (temp->right && temp->right->data!=-1)
            q.push(temp->right);
        else if (temp->right && temp->right->data==-1)
            ;
        else
        {
            temp->right = createNode(data);
            return root;
        }
    }
    return root;
}

void deletenode(Node* cur)
{
    if (!cur)
        return;
    if (cur->left && cur->right)
    {
        if(cur->left->data==-1 && cur->right->data!=-1)
        cur->left->data=-99999;
        else if(cur->left->data!=-1 && cur->right->data==-1)
        cur->right->data=-99999;
        else if(cur->left->data==-1 && cur->right->data==-1)
        cur->right->data=-99999;
    }
    deletenode(cur->left);
    deletenode(cur->right);
}

void printArray(int ints[], int len, int m)
{
    int s=0;
    if (ints[len-1]==-1)
    s++;
    for (int i = 0; i < len; i++)
    s+=ints[i];
    if (s==m)
    {
        if (ints[len-1]==-1)
        len--;
        for(int i=0; i<len; i++)
        cout<<ints[i]<<' ';
        cout<<endl;
    }
}

void recurse(Node* node, int path[], int len, int res)
{
    if (!node)
        return;    
    path[len] = node->data;
    len++;    
    if (!node->left && !node->right)
        printArray(path, len, res);
    else
    {
        recurse(node->left, path, len, res);
        recurse(node->right, path, len, res);
    }
}

void paths(Node* node, int res)
{
    int path[1000];
    recurse(node, path, 0, res);
}

int main()
{
    int t, k, res;
    cin>>t;
    vector<int> v;
    while(cin)
    {
        cin>>k;
        v.push_back(k);
    }
    res=v[v.size()-1];
    v.pop_back();
    v.pop_back();
    int s=v.size();
    int arr[s];
    for(int i=0; i<s; i++)
        arr[i]=v[i];
    Node* root = createNode(arr[0]);
    for (int i=1; i<s; i++)
    root = insertnode(root, arr[i]);

    deletenode(root);
    paths(root, res);
    return 0;
}


/*
There was a better approach with just the array, without having to construct the entire tree. That is logically a bit difficult to implement, so here we go with the
original approach of constructing the tree and traversing it. 
We keep adding the nodes in level order manner into the tree, along with the tapering nodes with value -1. 
Then we explore all possible paths in this tree while adding the node values, which are saved in an array. If this sum matches with the given sum, we print 
that path using the created array.
This is how we can print all possible paths that give the required sum.

Its time complexity will be O(n + n + n+ h*l) = O(n+hl) where h=height of tree, n=no. of nodes and l=no. of leaf nodes
as we need to explore all possible l paths over n nodes in a tree of height h. We also use an array and a queue and traverse the tree, all of which take O(n) time
Hence the resultant is O(n+hl)
Space complexity will be O(n+h) as height of tree will be depth of recursion stack, and there are n nodes. So O(n+h)

*/
