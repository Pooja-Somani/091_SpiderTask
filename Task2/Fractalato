#include <cmath>
#include <cstdio>
#include <vector>
#include <iostream>
#include <algorithm>
using namespace std;


int main() {
    /* Enter your code here. Read input from STDIN. Print output to STDOUT */  
    long t;
    cin>>t;
    long up=1, down=0;
    long newup, newdown;
    
    for(long i=1; i<=t; i++)
    {
        newup= ((up*3)+(down*1))%1000000007;
        newdown= ((up*1)+(down*3))%1000000007;
        up=newup;
        down=newdown;
    }       
    long res= (up%1000000007);
    cout<<res;
    return 0;
}

/*
With the given pattern, every up triangle gives 3 up triangles and 1 down triangle in the next second. 
Every down triangle gives 3 down triangles and 1 up triangle.
So we update the number of up and down triangles after every instance, and return the total number of up triangles remaining at the end.
All computations are done modulo 10^9+7.

Time Complexity = O(t) where t is the given time
Space Complexity = O(1) as only constant extra space was used
*/
