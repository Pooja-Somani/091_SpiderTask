#include <cmath>
#include <cstdio>
#include <vector>
#include <iostream>
#include <algorithm>
#include <queue>
#include <set>
using namespace std;

int gridpath(vector<vector<int>>& grid) 
{
        int rows = grid.size();
        int cols = grid[0].size();
    
        queue<vector<int>> q;
        set<vector<int>> visited;
    
        int r, c; 
        int step;
        
        if (rows==1 && cols==1) 
            return 0;      
        q.push({0, 0, 0});
        visited.insert({0, 0});
        
        while (!q.empty()) 
        {
            r = q.front()[0]; 
            c = q.front()[1]; 
            step = q.front()[2];            
            q.pop();
                
            if (r==rows-1 && c==cols-1) 
                return step;

            vector<vector<int>> dir = {{r+1, c}, {r-1, c}, {r, c+1}, {r, c-1}};
            
            for(auto d:dir) 
            {
                int nr = d[0]; 
                int nc = d[1];
                
                if (nr>-1 && nr<rows && nc>-1 && nc<cols) 
                {                    
                    if (grid[nr][nc]==0 && visited.find({nr, nc})==visited.end()) 
                    {
                        q.push({nr, nc, step+1});
                        visited.insert({nr, nc});
                    }
                    
                }
            }
        }
        return -1;
    }

int main() {
    
    int n,m;
    char x;
    cin>>n>>m;
    
    vector<vector<int>> grid;
    for(int i=0; i<n; i++)
    {
        vector<int> v;
        for(int j=0; j<m; j++)
        {            
            cin>>x;
            if (x=='.')
                v.push_back(0);
            else
                v.push_back(1);
        }
        grid.push_back(v);
    }    
    
    cout<<gridpath(grid);
    
    return 0;
}
