#include <cmath>
#include <cstdio>
#include <vector>
#include <iostream>
#include <algorithm>
using namespace std;

class Mnode
{
    public:
        int data;
        struct Mnode *left;
        struct Mnode *right;
};

Mnode *newnode(int data)
{
    Mnode *node = new Mnode();
    node->data=data;
    node->left=NULL;
    node->right=NULL;    
    return node;
}

Mnode *func(vector<int> v, int s, int e)
{
    if (s>e)
        return NULL;
    int minindex = s;
    for(int i=s; i<=e; i++)
    {
        if (v[minindex]>v[i])
            minindex=i;
    }
    Mnode *root = newnode(v[minindex]);
    root->left = func(v, s, minindex-1);
    root->right = func(v, minindex+1, e);
    return root;    
}

int depth(Mnode* root, int x)
{
    if (!root)
        return -1;
    int d=-1;

    if ((root->data == x) || (d=depth(root->left, x))>=0 || (d=depth(root->right, x))>=0)
        return d+1;
    return d;
}

int main() {
    int t;
    cin>>t;
    while(t--)
    {
        int n;
        cin>>n;
        vector<int> v(n);
        for(int i=0; i<n; i++)
            cin>>v[i];
        
        Mnode *root = func(v, 0, n-1);        
        for(int i=0; i<n; i++)        
            cout<<depth(root, v[i])<<' ';
        cout<<endl;
    }  
    return 0;
}
